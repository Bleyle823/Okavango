/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LendingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "INTERSEST_RATE"
      | "LIQUIDATION_THRESHOLD"
      | "calculateInterest"
      | "createLoan"
      | "execute"
      | "executeWithToken"
      | "gasService"
      | "gateway"
      | "initiateCrossChainLoan"
      | "lendingToken"
      | "loans"
      | "nextLoanId"
      | "owner"
      | "renounceOwnership"
      | "repayCrossChainLoan"
      | "repayLoan"
      | "rwaOracle"
      | "rwaToken"
      | "sourceAddress"
      | "sourceChain"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollateralReleased"
      | "CrossChainLoanRepaid"
      | "LoanCreated"
      | "LoanLiquidated"
      | "LoanRepaid"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "INTERSEST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLoan",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BytesLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithToken",
    values: [BytesLike, string, string, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gasService",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gateway", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initiateCrossChainLoan",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "nextLoanId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayCrossChainLoan",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rwaOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "rwaToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sourceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sourceChain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "INTERSEST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasService", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gateway", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateCrossChainLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextLoanId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayCrossChainLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rwaOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rwaToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sourceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CollateralReleasedEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    collateralId: BigNumberish,
    borrower: AddressLike
  ];
  export type OutputTuple = [
    loanId: bigint,
    collateralId: bigint,
    borrower: string
  ];
  export interface OutputObject {
    loanId: bigint;
    collateralId: bigint;
    borrower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrossChainLoanRepaidEvent {
  export type InputTuple = [loanId: BigNumberish];
  export type OutputTuple = [loanId: bigint];
  export interface OutputObject {
    loanId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanCreatedEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish,
    collateralId: BigNumberish
  ];
  export type OutputTuple = [
    loanId: bigint,
    borrower: string,
    amount: bigint,
    collateralId: bigint
  ];
  export interface OutputObject {
    loanId: bigint;
    borrower: string;
    amount: bigint;
    collateralId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanLiquidatedEvent {
  export type InputTuple = [loanId: BigNumberish, liquidator: AddressLike];
  export type OutputTuple = [loanId: bigint, liquidator: string];
  export interface OutputObject {
    loanId: bigint;
    liquidator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRepaidEvent {
  export type InputTuple = [loanId: BigNumberish];
  export type OutputTuple = [loanId: bigint];
  export interface OutputObject {
    loanId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPool extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPool;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  INTERSEST_RATE: TypedContractMethod<[], [bigint], "view">;

  LIQUIDATION_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  calculateInterest: TypedContractMethod<
    [_amount: BigNumberish, _startTime: BigNumberish, _duration: BigNumberish],
    [bigint],
    "view"
  >;

  createLoan: TypedContractMethod<
    [
      _amount: BigNumberish,
      _collateralId: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [
      commandId: BytesLike,
      sourceChain: string,
      sourceAddress: string,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  executeWithToken: TypedContractMethod<
    [
      commandId: BytesLike,
      sourceChain: string,
      sourceAddress: string,
      payload: BytesLike,
      tokenSymbol: string,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  gasService: TypedContractMethod<[], [string], "view">;

  gateway: TypedContractMethod<[], [string], "view">;

  initiateCrossChainLoan: TypedContractMethod<
    [
      destinationChain: string,
      destinationAddress: string,
      _amount: BigNumberish,
      _collateralId: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "payable"
  >;

  lendingToken: TypedContractMethod<[], [string], "view">;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, boolean] & {
        amount: bigint;
        collateralId: bigint;
        startTime: bigint;
        duration: bigint;
        borrower: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  nextLoanId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repayCrossChainLoan: TypedContractMethod<
    [
      _loanId: BigNumberish,
      destinationChain: string,
      destinationAddress: string
    ],
    [void],
    "payable"
  >;

  repayLoan: TypedContractMethod<[_loanId: BigNumberish], [void], "nonpayable">;

  rwaOracle: TypedContractMethod<[], [string], "view">;

  rwaToken: TypedContractMethod<[], [string], "view">;

  sourceAddress: TypedContractMethod<[], [string], "view">;

  sourceChain: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "INTERSEST_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LIQUIDATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateInterest"
  ): TypedContractMethod<
    [_amount: BigNumberish, _startTime: BigNumberish, _duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createLoan"
  ): TypedContractMethod<
    [
      _amount: BigNumberish,
      _collateralId: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [
      commandId: BytesLike,
      sourceChain: string,
      sourceAddress: string,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeWithToken"
  ): TypedContractMethod<
    [
      commandId: BytesLike,
      sourceChain: string,
      sourceAddress: string,
      payload: BytesLike,
      tokenSymbol: string,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "gasService"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gateway"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initiateCrossChainLoan"
  ): TypedContractMethod<
    [
      destinationChain: string,
      destinationAddress: string,
      _amount: BigNumberish,
      _collateralId: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "lendingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string, boolean] & {
        amount: bigint;
        collateralId: bigint;
        startTime: bigint;
        duration: bigint;
        borrower: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextLoanId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayCrossChainLoan"
  ): TypedContractMethod<
    [
      _loanId: BigNumberish,
      destinationChain: string,
      destinationAddress: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<[_loanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rwaOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rwaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sourceAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sourceChain"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CollateralReleased"
  ): TypedContractEvent<
    CollateralReleasedEvent.InputTuple,
    CollateralReleasedEvent.OutputTuple,
    CollateralReleasedEvent.OutputObject
  >;
  getEvent(
    key: "CrossChainLoanRepaid"
  ): TypedContractEvent<
    CrossChainLoanRepaidEvent.InputTuple,
    CrossChainLoanRepaidEvent.OutputTuple,
    CrossChainLoanRepaidEvent.OutputObject
  >;
  getEvent(
    key: "LoanCreated"
  ): TypedContractEvent<
    LoanCreatedEvent.InputTuple,
    LoanCreatedEvent.OutputTuple,
    LoanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanLiquidated"
  ): TypedContractEvent<
    LoanLiquidatedEvent.InputTuple,
    LoanLiquidatedEvent.OutputTuple,
    LoanLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRepaid"
  ): TypedContractEvent<
    LoanRepaidEvent.InputTuple,
    LoanRepaidEvent.OutputTuple,
    LoanRepaidEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CollateralReleased(uint256,uint256,address)": TypedContractEvent<
      CollateralReleasedEvent.InputTuple,
      CollateralReleasedEvent.OutputTuple,
      CollateralReleasedEvent.OutputObject
    >;
    CollateralReleased: TypedContractEvent<
      CollateralReleasedEvent.InputTuple,
      CollateralReleasedEvent.OutputTuple,
      CollateralReleasedEvent.OutputObject
    >;

    "CrossChainLoanRepaid(uint256)": TypedContractEvent<
      CrossChainLoanRepaidEvent.InputTuple,
      CrossChainLoanRepaidEvent.OutputTuple,
      CrossChainLoanRepaidEvent.OutputObject
    >;
    CrossChainLoanRepaid: TypedContractEvent<
      CrossChainLoanRepaidEvent.InputTuple,
      CrossChainLoanRepaidEvent.OutputTuple,
      CrossChainLoanRepaidEvent.OutputObject
    >;

    "LoanCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;
    LoanCreated: TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;

    "LoanLiquidated(uint256,address)": TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;
    LoanLiquidated: TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;

    "LoanRepaid(uint256)": TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
    LoanRepaid: TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
